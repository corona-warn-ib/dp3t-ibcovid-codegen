/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0-beta).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package es.caib.dp3t.ibcovid.codegen.controller.client.codes.api;

import es.caib.dp3t.ibcovid.codegen.controller.client.codes.model.CodesResult;
import es.caib.dp3t.ibcovid.codegen.controller.client.codes.model.MessageResponse;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-08-10T16:59:47.385+02:00[Europe/Paris]")
@Validated
@Api(value = "generate", description = "the generate API")
public interface GenerateApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /generate : Provides n verification codes
     * Generates n verification codes to be used by Autonomous Communities so they can provide codes to affected people (n &lt;&#x3D; 1000)
     *
     * @param n  (required)
     * @return Authentication error (status code 403)
     *         or Codes generated (status code 200)
     *         or Exception (status code 500)
     */
    @ApiOperation(value = "Provides n verification codes", nickname = "getCodes", notes = "Generates n verification codes to be used by Autonomous Communities so they can provide codes to affected people (n <= 1000)", response = CodesResult.class, authorizations = {
        @Authorization(value = "apiKeyAuth")
    }, tags={ "generation-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 403, message = "Authentication error", response = MessageResponse.class),
        @ApiResponse(code = 200, message = "Codes generated", response = CodesResult.class),
        @ApiResponse(code = 500, message = "Exception", response = MessageResponse.class) })
    @RequestMapping(value = "/generate",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CodesResult> getCodes(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "n", required = true) Integer n) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"codes\" : [ \"codes\", \"codes\" ], \"signature\" : \"signature\", \"validUntil\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
